#creation of REST API in python with Flask Framework.
#REST(Representational State Transfer)is an architectural style and an approach of communications that is often used in development of web services
#packages need to be installed

$ virtualenv venv
$ source venv/bin/activate
$ pip install flask flask-jsonpify flask-sqlalchemy flask-restful
$ pip freeze

#Code for REST API
from flask import Flask, request
from flask_restful import Resource, Api
from sqlalchemy import create_engine
from json import dumps
from flask.ext.jsonpify import jsonify

db_connect = create_engine('sqlite:///sample.db')
app = Flask(__name__)
api = Api(app)

class students(Resource):
    def get(self):
        conn = db_connect.connect() # This syntax connects to database
        query = conn.execute("select * from students") # Performs query line and results the json results
        return {'students': [i[0] for i in query.cursor.fetchall()]} # Retrieves the first column of studentID

class Tracks(Resource):
    def get(self):
        conn = db_connect.connect()
        query = conn.execute("select trackid, name, faculty, marks from unit;")
        result = {'data': [dict(zip(tuple (query.keys()) ,i)) for i in query.cursor]}
        return jsonify(result)

class StudentName(Resource):
    def get(self, student_id):
        conn = db_connect.connect()
        query = conn.execute("select * from students where studentId =%d "  %int(student_id))
        result = {'data': [dict(zip(tuple (query.keys()) ,i)) for i in query.cursor]}
        return jsonify(result)
        

api.add_resource(students, '/students') # Route_1
api.add_resource(Tracks, '/tracks') # Route_2
api.add_resource(Studentname, '/employees/<StudentName>') # Route_3


if __name__ == '__main__':
     app.run(port='5002')
     

